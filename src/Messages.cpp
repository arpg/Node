// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NodeMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node/Messages.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
  // @@protoc_insertion_point(includes)

  namespace msg {

  namespace {

  const ::google::protobuf::Descriptor* ResourceLocator_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    ResourceLocator_reflection_ = NULL;
  const ::google::protobuf::Descriptor* ResourceTable_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    ResourceTable_reflection_ = NULL;
  const ::google::protobuf::Descriptor* GetTableRequest_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    GetTableRequest_reflection_ = NULL;
  const ::google::protobuf::Descriptor* GetTableResponse_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    GetTableResponse_reflection_ = NULL;
  const ::google::protobuf::Descriptor* SetTableRequest_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    SetTableRequest_reflection_ = NULL;
  const ::google::protobuf::Descriptor* SetTableResponse_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    SetTableResponse_reflection_ = NULL;
  const ::google::protobuf::Descriptor* DeleteFromTableRequest_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    DeleteFromTableRequest_reflection_ = NULL;
  const ::google::protobuf::Descriptor* DeleteFromTableResponse_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    DeleteFromTableResponse_reflection_ = NULL;
  const ::google::protobuf::Descriptor* HeartbeatRequest_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    HeartbeatRequest_reflection_ = NULL;
  const ::google::protobuf::Descriptor* HeartbeatResponse_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    HeartbeatResponse_reflection_ = NULL;
  const ::google::protobuf::Descriptor* Bool_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    Bool_reflection_ = NULL;
  const ::google::protobuf::Descriptor* String_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    String_reflection_ = NULL;
  const ::google::protobuf::Descriptor* Int_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    Int_reflection_ = NULL;
  const ::google::protobuf::Descriptor* Void_descriptor_ = NULL;
  const ::google::protobuf::internal::GeneratedMessageReflection*
    Void_reflection_ = NULL;

  }  // namespace


  void protobuf_AssignDesc_NodeMessages_2eproto() {
    protobuf_AddDesc_NodeMessages_2eproto();
    const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NodeMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceLocator_descriptor_ = file->message_type(0);
  static const int ResourceLocator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceLocator, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceLocator, address_),
  };
  ResourceLocator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceLocator_descriptor_,
      ResourceLocator::default_instance_,
      ResourceLocator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceLocator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceLocator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceLocator));
  ResourceTable_descriptor_ = file->message_type(1);
  static const int ResourceTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTable, urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTable, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTable, checksum_),
  };
  ResourceTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceTable_descriptor_,
      ResourceTable::default_instance_,
      ResourceTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceTable));
  GetTableRequest_descriptor_ = file->message_type(2);
  static const int GetTableRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, requesting_node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, requesting_node_addr_),
  };
  GetTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableRequest_descriptor_,
      GetTableRequest::default_instance_,
      GetTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableRequest));
  GetTableResponse_descriptor_ = file->message_type(3);
  static const int GetTableResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, resource_table_),
  };
  GetTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableResponse_descriptor_,
      GetTableResponse::default_instance_,
      GetTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableResponse));
  SetTableRequest_descriptor_ = file->message_type(4);
  static const int SetTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableRequest, requesting_node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableRequest, requesting_node_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableRequest, resource_table_),
  };
  SetTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTableRequest_descriptor_,
      SetTableRequest::default_instance_,
      SetTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTableRequest));
  SetTableResponse_descriptor_ = file->message_type(5);
  static const int SetTableResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableResponse, checksum_),
  };
  SetTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTableResponse_descriptor_,
      SetTableResponse::default_instance_,
      SetTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTableResponse));
  DeleteFromTableRequest_descriptor_ = file->message_type(6);
  static const int DeleteFromTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFromTableRequest, requesting_node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFromTableRequest, requesting_node_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFromTableRequest, urls_to_delete_),
  };
  DeleteFromTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFromTableRequest_descriptor_,
      DeleteFromTableRequest::default_instance_,
      DeleteFromTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFromTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFromTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFromTableRequest));
  DeleteFromTableResponse_descriptor_ = file->message_type(7);
  static const int DeleteFromTableResponse_offsets_[1] = {
  };
  DeleteFromTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFromTableResponse_descriptor_,
      DeleteFromTableResponse::default_instance_,
      DeleteFromTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFromTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFromTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFromTableResponse));
  HeartbeatRequest_descriptor_ = file->message_type(8);
  static const int HeartbeatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, checksum_),
  };
  HeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRequest_descriptor_,
      HeartbeatRequest::default_instance_,
      HeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRequest));
  HeartbeatResponse_descriptor_ = file->message_type(9);
  static const int HeartbeatResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, resource_table_),
  };
  HeartbeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatResponse_descriptor_,
      HeartbeatResponse::default_instance_,
      HeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatResponse));
  Bool_descriptor_ = file->message_type(10);
  static const int Bool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, val_),
  };
  Bool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bool_descriptor_,
      Bool::default_instance_,
      Bool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bool));
  String_descriptor_ = file->message_type(11);
  static const int String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, value_),
  };
  String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      String_descriptor_,
      String::default_instance_,
      String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(String));
  Int_descriptor_ = file->message_type(12);
  static const int Int_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, value_),
  };
  Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Int_descriptor_,
      Int::default_instance_,
      Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Int));
  Void_descriptor_ = file->message_type(13);
  static const int Void_offsets_[1] = {
  };
  Void_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Void_descriptor_,
      Void::default_instance_,
      Void_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Void));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NodeMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceLocator_descriptor_, &ResourceLocator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceTable_descriptor_, &ResourceTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableRequest_descriptor_, &GetTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableResponse_descriptor_, &GetTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTableRequest_descriptor_, &SetTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTableResponse_descriptor_, &SetTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFromTableRequest_descriptor_, &DeleteFromTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFromTableResponse_descriptor_, &DeleteFromTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRequest_descriptor_, &HeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatResponse_descriptor_, &HeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bool_descriptor_, &Bool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    String_descriptor_, &String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Int_descriptor_, &Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Void_descriptor_, &Void::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NodeMessages_2eproto() {
  delete ResourceLocator::default_instance_;
  delete ResourceLocator_reflection_;
  delete ResourceTable::default_instance_;
  delete ResourceTable_reflection_;
  delete GetTableRequest::default_instance_;
  delete GetTableRequest_reflection_;
  delete GetTableResponse::default_instance_;
  delete GetTableResponse_reflection_;
  delete SetTableRequest::default_instance_;
  delete SetTableRequest_reflection_;
  delete SetTableResponse::default_instance_;
  delete SetTableResponse_reflection_;
  delete DeleteFromTableRequest::default_instance_;
  delete DeleteFromTableRequest_reflection_;
  delete DeleteFromTableResponse::default_instance_;
  delete DeleteFromTableResponse_reflection_;
  delete HeartbeatRequest::default_instance_;
  delete HeartbeatRequest_reflection_;
  delete HeartbeatResponse::default_instance_;
  delete HeartbeatResponse_reflection_;
  delete Bool::default_instance_;
  delete Bool_reflection_;
  delete String::default_instance_;
  delete String_reflection_;
  delete Int::default_instance_;
  delete Int_reflection_;
  delete Void::default_instance_;
  delete Void_reflection_;
}

void protobuf_AddDesc_NodeMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022NodeMessages.proto\022\003msg\"4\n\017ResourceLoc"
    "ator\022\020\n\010resource\030\001 \002(\t\022\017\n\007address\030\002 \002(\t\""
    "V\n\rResourceTable\022\"\n\004urls\030\001 \003(\0132\024.msg.Res"
    "ourceLocator\022\017\n\007version\030\002 \002(\r\022\020\n\010checksu"
    "m\030\003 \002(\r\"M\n\017GetTableRequest\022\034\n\024requesting"
    "_node_name\030\001 \002(\t\022\034\n\024requesting_node_addr"
    "\030\002 \002(\t\"S\n\020GetTableResponse\022\023\n\013sender_nam"
    "e\030\001 \002(\t\022*\n\016resource_table\030\002 \002(\0132\022.msg.Re"
    "sourceTable\"y\n\017SetTableRequest\022\034\n\024reques"
    "ting_node_name\030\001 \002(\t\022\034\n\024requesting_node_"
    "addr\030\002 \002(\t\022*\n\016resource_table\030\003 \002(\0132\022.msg"
    ".ResourceTable\"5\n\020SetTableResponse\022\017\n\007ve"
    "rsion\030\001 \002(\r\022\020\n\010checksum\030\002 \002(\r\"\202\001\n\026Delete"
    "FromTableRequest\022\034\n\024requesting_node_name"
    "\030\001 \002(\t\022\034\n\024requesting_node_addr\030\002 \002(\t\022,\n\016"
    "urls_to_delete\030\003 \003(\0132\024.msg.ResourceLocat"
    "or\"\031\n\027DeleteFromTableResponse\"5\n\020Heartbe"
    "atRequest\022\017\n\007version\030\001 \002(\r\022\020\n\010checksum\030\002"
    " \002(\r\"b\n\021HeartbeatResponse\022\017\n\007version\030\001 \002"
    "(\r\022\020\n\010checksum\030\002 \002(\r\022*\n\016resource_table\030\003"
    " \001(\0132\022.msg.ResourceTable\"\023\n\004Bool\022\013\n\003val\030"
    "\001 \002(\010\"\027\n\006String\022\r\n\005value\030\001 \001(\t\"\024\n\003Int\022\r\n"
    "\005value\030\001 \001(\005\"\006\n\004Void", 900);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NodeMessages.proto", &protobuf_RegisterTypes);
  ResourceLocator::default_instance_ = new ResourceLocator();
  ResourceTable::default_instance_ = new ResourceTable();
  GetTableRequest::default_instance_ = new GetTableRequest();
  GetTableResponse::default_instance_ = new GetTableResponse();
  SetTableRequest::default_instance_ = new SetTableRequest();
  SetTableResponse::default_instance_ = new SetTableResponse();
  DeleteFromTableRequest::default_instance_ = new DeleteFromTableRequest();
  DeleteFromTableResponse::default_instance_ = new DeleteFromTableResponse();
  HeartbeatRequest::default_instance_ = new HeartbeatRequest();
  HeartbeatResponse::default_instance_ = new HeartbeatResponse();
  Bool::default_instance_ = new Bool();
  String::default_instance_ = new String();
  Int::default_instance_ = new Int();
  Void::default_instance_ = new Void();
  ResourceLocator::default_instance_->InitAsDefaultInstance();
  ResourceTable::default_instance_->InitAsDefaultInstance();
  GetTableRequest::default_instance_->InitAsDefaultInstance();
  GetTableResponse::default_instance_->InitAsDefaultInstance();
  SetTableRequest::default_instance_->InitAsDefaultInstance();
  SetTableResponse::default_instance_->InitAsDefaultInstance();
  DeleteFromTableRequest::default_instance_->InitAsDefaultInstance();
  DeleteFromTableResponse::default_instance_->InitAsDefaultInstance();
  HeartbeatRequest::default_instance_->InitAsDefaultInstance();
  HeartbeatResponse::default_instance_->InitAsDefaultInstance();
  Bool::default_instance_->InitAsDefaultInstance();
  String::default_instance_->InitAsDefaultInstance();
  Int::default_instance_->InitAsDefaultInstance();
  Void::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NodeMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NodeMessages_2eproto {
  StaticDescriptorInitializer_NodeMessages_2eproto() {
    protobuf_AddDesc_NodeMessages_2eproto();
  }
} static_descriptor_initializer_NodeMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResourceLocator::kResourceFieldNumber;
const int ResourceLocator::kAddressFieldNumber;
#endif  // !_MSC_VER

ResourceLocator::ResourceLocator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ResourceLocator)
}

void ResourceLocator::InitAsDefaultInstance() {
}

ResourceLocator::ResourceLocator(const ResourceLocator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ResourceLocator)
}

void ResourceLocator::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceLocator::~ResourceLocator() {
  // @@protoc_insertion_point(destructor:msg.ResourceLocator)
  SharedDtor();
}

void ResourceLocator::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void ResourceLocator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceLocator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceLocator_descriptor_;
}

const ResourceLocator& ResourceLocator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

ResourceLocator* ResourceLocator::default_instance_ = NULL;

ResourceLocator* ResourceLocator::New() const {
  return new ResourceLocator;
}

void ResourceLocator::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceLocator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ResourceLocator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resource = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resource");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ResourceLocator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ResourceLocator)
  return false;
#undef DO_
}

void ResourceLocator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ResourceLocator)
  // required string resource = 1;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resource(), output);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ResourceLocator)
}

::google::protobuf::uint8* ResourceLocator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ResourceLocator)
  // required string resource = 1;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resource(), target);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ResourceLocator)
  return target;
}

int ResourceLocator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceLocator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceLocator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceLocator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceLocator::MergeFrom(const ResourceLocator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceLocator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceLocator::CopyFrom(const ResourceLocator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLocator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResourceLocator::Swap(ResourceLocator* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceLocator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceLocator_descriptor_;
  metadata.reflection = ResourceLocator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceTable::kUrlsFieldNumber;
const int ResourceTable::kVersionFieldNumber;
const int ResourceTable::kChecksumFieldNumber;
#endif  // !_MSC_VER

ResourceTable::ResourceTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ResourceTable)
}

void ResourceTable::InitAsDefaultInstance() {
}

ResourceTable::ResourceTable(const ResourceTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ResourceTable)
}

void ResourceTable::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceTable::~ResourceTable() {
  // @@protoc_insertion_point(destructor:msg.ResourceTable)
  SharedDtor();
}

void ResourceTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceTable_descriptor_;
}

const ResourceTable& ResourceTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

ResourceTable* ResourceTable::default_instance_ = NULL;

ResourceTable* ResourceTable::New() const {
  return new ResourceTable;
}

void ResourceTable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResourceTable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, checksum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ResourceTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ResourceLocator urls = 1;
      case 1: {
        if (tag == 10) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_urls;
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_checksum;
        break;
      }

      // required uint32 checksum = 3;
      case 3: {
        if (tag == 24) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ResourceTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ResourceTable)
  return false;
#undef DO_
}

void ResourceTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ResourceTable)
  // repeated .msg.ResourceLocator urls = 1;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->urls(i), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // required uint32 checksum = 3;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ResourceTable)
}

::google::protobuf::uint8* ResourceTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ResourceTable)
  // repeated .msg.ResourceLocator urls = 1;
  for (int i = 0; i < this->urls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->urls(i), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // required uint32 checksum = 3;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ResourceTable)
  return target;
}

int ResourceTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 checksum = 3;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

  }
  // repeated .msg.ResourceLocator urls = 1;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceTable::MergeFrom(const ResourceTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  urls_.MergeFrom(from.urls_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceTable::CopyFrom(const ResourceTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->urls())) return false;
  return true;
}

void ResourceTable::Swap(ResourceTable* other) {
  if (other != this) {
    urls_.Swap(&other->urls_);
    std::swap(version_, other->version_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceTable_descriptor_;
  metadata.reflection = ResourceTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableRequest::kRequestingNodeNameFieldNumber;
const int GetTableRequest::kRequestingNodeAddrFieldNumber;
#endif  // !_MSC_VER

GetTableRequest::GetTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GetTableRequest)
}

void GetTableRequest::InitAsDefaultInstance() {
}

GetTableRequest::GetTableRequest(const GetTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GetTableRequest)
}

void GetTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesting_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesting_node_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:msg.GetTableRequest)
  SharedDtor();
}

void GetTableRequest::SharedDtor() {
  if (requesting_node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requesting_node_name_;
  }
  if (requesting_node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requesting_node_addr_;
  }
  if (this != default_instance_) {
  }
}

void GetTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableRequest_descriptor_;
}

const GetTableRequest& GetTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

GetTableRequest* GetTableRequest::default_instance_ = NULL;

GetTableRequest* GetTableRequest::New() const {
  return new GetTableRequest;
}

void GetTableRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_requesting_node_name()) {
      if (requesting_node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requesting_node_name_->clear();
      }
    }
    if (has_requesting_node_addr()) {
      if (requesting_node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requesting_node_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GetTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requesting_node_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requesting_node_name().data(), this->requesting_node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requesting_node_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requesting_node_addr;
        break;
      }

      // required string requesting_node_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_requesting_node_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_node_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requesting_node_addr().data(), this->requesting_node_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requesting_node_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GetTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GetTableRequest)
  return false;
#undef DO_
}

void GetTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GetTableRequest)
  // required string requesting_node_name = 1;
  if (has_requesting_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_name().data(), this->requesting_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requesting_node_name(), output);
  }

  // required string requesting_node_addr = 2;
  if (has_requesting_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_addr().data(), this->requesting_node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requesting_node_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GetTableRequest)
}

::google::protobuf::uint8* GetTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetTableRequest)
  // required string requesting_node_name = 1;
  if (has_requesting_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_name().data(), this->requesting_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requesting_node_name(), target);
  }

  // required string requesting_node_addr = 2;
  if (has_requesting_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_addr().data(), this->requesting_node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requesting_node_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetTableRequest)
  return target;
}

int GetTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requesting_node_name = 1;
    if (has_requesting_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesting_node_name());
    }

    // required string requesting_node_addr = 2;
    if (has_requesting_node_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesting_node_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableRequest::MergeFrom(const GetTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesting_node_name()) {
      set_requesting_node_name(from.requesting_node_name());
    }
    if (from.has_requesting_node_addr()) {
      set_requesting_node_addr(from.requesting_node_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetTableRequest::Swap(GetTableRequest* other) {
  if (other != this) {
    std::swap(requesting_node_name_, other->requesting_node_name_);
    std::swap(requesting_node_addr_, other->requesting_node_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableRequest_descriptor_;
  metadata.reflection = GetTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableResponse::kSenderNameFieldNumber;
const int GetTableResponse::kResourceTableFieldNumber;
#endif  // !_MSC_VER

GetTableResponse::GetTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GetTableResponse)
}

void GetTableResponse::InitAsDefaultInstance() {
  resource_table_ = const_cast< ::msg::ResourceTable*>(&::msg::ResourceTable::default_instance());
}

GetTableResponse::GetTableResponse(const GetTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GetTableResponse)
}

void GetTableResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableResponse::~GetTableResponse() {
  // @@protoc_insertion_point(destructor:msg.GetTableResponse)
  SharedDtor();
}

void GetTableResponse::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_name_;
  }
  if (this != default_instance_) {
    delete resource_table_;
  }
}

void GetTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableResponse_descriptor_;
}

const GetTableResponse& GetTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

GetTableResponse* GetTableResponse::default_instance_ = NULL;

GetTableResponse* GetTableResponse::New() const {
  return new GetTableResponse;
}

void GetTableResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_name_->clear();
      }
    }
    if (has_resource_table()) {
      if (resource_table_ != NULL) resource_table_->::msg::ResourceTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GetTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resource_table;
        break;
      }

      // required .msg.ResourceTable resource_table = 2;
      case 2: {
        if (tag == 18) {
         parse_resource_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GetTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GetTableResponse)
  return false;
#undef DO_
}

void GetTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GetTableResponse)
  // required string sender_name = 1;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender_name(), output);
  }

  // required .msg.ResourceTable resource_table = 2;
  if (has_resource_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GetTableResponse)
}

::google::protobuf::uint8* GetTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetTableResponse)
  // required string sender_name = 1;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender_name(), target);
  }

  // required .msg.ResourceTable resource_table = 2;
  if (has_resource_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetTableResponse)
  return target;
}

int GetTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender_name = 1;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // required .msg.ResourceTable resource_table = 2;
    if (has_resource_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableResponse::MergeFrom(const GetTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_resource_table()) {
      mutable_resource_table()->::msg::ResourceTable::MergeFrom(from.resource_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableResponse::CopyFrom(const GetTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_resource_table()) {
    if (!this->resource_table().IsInitialized()) return false;
  }
  return true;
}

void GetTableResponse::Swap(GetTableResponse* other) {
  if (other != this) {
    std::swap(sender_name_, other->sender_name_);
    std::swap(resource_table_, other->resource_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableResponse_descriptor_;
  metadata.reflection = GetTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTableRequest::kRequestingNodeNameFieldNumber;
const int SetTableRequest::kRequestingNodeAddrFieldNumber;
const int SetTableRequest::kResourceTableFieldNumber;
#endif  // !_MSC_VER

SetTableRequest::SetTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.SetTableRequest)
}

void SetTableRequest::InitAsDefaultInstance() {
  resource_table_ = const_cast< ::msg::ResourceTable*>(&::msg::ResourceTable::default_instance());
}

SetTableRequest::SetTableRequest(const SetTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.SetTableRequest)
}

void SetTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesting_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesting_node_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTableRequest::~SetTableRequest() {
  // @@protoc_insertion_point(destructor:msg.SetTableRequest)
  SharedDtor();
}

void SetTableRequest::SharedDtor() {
  if (requesting_node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requesting_node_name_;
  }
  if (requesting_node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requesting_node_addr_;
  }
  if (this != default_instance_) {
    delete resource_table_;
  }
}

void SetTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTableRequest_descriptor_;
}

const SetTableRequest& SetTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

SetTableRequest* SetTableRequest::default_instance_ = NULL;

SetTableRequest* SetTableRequest::New() const {
  return new SetTableRequest;
}

void SetTableRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_requesting_node_name()) {
      if (requesting_node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requesting_node_name_->clear();
      }
    }
    if (has_requesting_node_addr()) {
      if (requesting_node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requesting_node_addr_->clear();
      }
    }
    if (has_resource_table()) {
      if (resource_table_ != NULL) resource_table_->::msg::ResourceTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.SetTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requesting_node_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requesting_node_name().data(), this->requesting_node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requesting_node_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requesting_node_addr;
        break;
      }

      // required string requesting_node_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_requesting_node_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_node_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requesting_node_addr().data(), this->requesting_node_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requesting_node_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource_table;
        break;
      }

      // required .msg.ResourceTable resource_table = 3;
      case 3: {
        if (tag == 26) {
         parse_resource_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.SetTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.SetTableRequest)
  return false;
#undef DO_
}

void SetTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.SetTableRequest)
  // required string requesting_node_name = 1;
  if (has_requesting_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_name().data(), this->requesting_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requesting_node_name(), output);
  }

  // required string requesting_node_addr = 2;
  if (has_requesting_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_addr().data(), this->requesting_node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requesting_node_addr(), output);
  }

  // required .msg.ResourceTable resource_table = 3;
  if (has_resource_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resource_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.SetTableRequest)
}

::google::protobuf::uint8* SetTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SetTableRequest)
  // required string requesting_node_name = 1;
  if (has_requesting_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_name().data(), this->requesting_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requesting_node_name(), target);
  }

  // required string requesting_node_addr = 2;
  if (has_requesting_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_addr().data(), this->requesting_node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requesting_node_addr(), target);
  }

  // required .msg.ResourceTable resource_table = 3;
  if (has_resource_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resource_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SetTableRequest)
  return target;
}

int SetTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requesting_node_name = 1;
    if (has_requesting_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesting_node_name());
    }

    // required string requesting_node_addr = 2;
    if (has_requesting_node_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesting_node_addr());
    }

    // required .msg.ResourceTable resource_table = 3;
    if (has_resource_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTableRequest::MergeFrom(const SetTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesting_node_name()) {
      set_requesting_node_name(from.requesting_node_name());
    }
    if (from.has_requesting_node_addr()) {
      set_requesting_node_addr(from.requesting_node_addr());
    }
    if (from.has_resource_table()) {
      mutable_resource_table()->::msg::ResourceTable::MergeFrom(from.resource_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTableRequest::CopyFrom(const SetTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_resource_table()) {
    if (!this->resource_table().IsInitialized()) return false;
  }
  return true;
}

void SetTableRequest::Swap(SetTableRequest* other) {
  if (other != this) {
    std::swap(requesting_node_name_, other->requesting_node_name_);
    std::swap(requesting_node_addr_, other->requesting_node_addr_);
    std::swap(resource_table_, other->resource_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTableRequest_descriptor_;
  metadata.reflection = SetTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTableResponse::kVersionFieldNumber;
const int SetTableResponse::kChecksumFieldNumber;
#endif  // !_MSC_VER

SetTableResponse::SetTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.SetTableResponse)
}

void SetTableResponse::InitAsDefaultInstance() {
}

SetTableResponse::SetTableResponse(const SetTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.SetTableResponse)
}

void SetTableResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTableResponse::~SetTableResponse() {
  // @@protoc_insertion_point(destructor:msg.SetTableResponse)
  SharedDtor();
}

void SetTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTableResponse_descriptor_;
}

const SetTableResponse& SetTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

SetTableResponse* SetTableResponse::default_instance_ = NULL;

SetTableResponse* SetTableResponse::New() const {
  return new SetTableResponse;
}

void SetTableResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetTableResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, checksum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.SetTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checksum;
        break;
      }

      // required uint32 checksum = 2;
      case 2: {
        if (tag == 16) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.SetTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.SetTableResponse)
  return false;
#undef DO_
}

void SetTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.SetTableResponse)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required uint32 checksum = 2;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.SetTableResponse)
}

::google::protobuf::uint8* SetTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SetTableResponse)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required uint32 checksum = 2;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SetTableResponse)
  return target;
}

int SetTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 checksum = 2;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTableResponse::MergeFrom(const SetTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTableResponse::CopyFrom(const SetTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetTableResponse::Swap(SetTableResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTableResponse_descriptor_;
  metadata.reflection = SetTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFromTableRequest::kRequestingNodeNameFieldNumber;
const int DeleteFromTableRequest::kRequestingNodeAddrFieldNumber;
const int DeleteFromTableRequest::kUrlsToDeleteFieldNumber;
#endif  // !_MSC_VER

DeleteFromTableRequest::DeleteFromTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.DeleteFromTableRequest)
}

void DeleteFromTableRequest::InitAsDefaultInstance() {
}

DeleteFromTableRequest::DeleteFromTableRequest(const DeleteFromTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.DeleteFromTableRequest)
}

void DeleteFromTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesting_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesting_node_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFromTableRequest::~DeleteFromTableRequest() {
  // @@protoc_insertion_point(destructor:msg.DeleteFromTableRequest)
  SharedDtor();
}

void DeleteFromTableRequest::SharedDtor() {
  if (requesting_node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requesting_node_name_;
  }
  if (requesting_node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requesting_node_addr_;
  }
  if (this != default_instance_) {
  }
}

void DeleteFromTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFromTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFromTableRequest_descriptor_;
}

const DeleteFromTableRequest& DeleteFromTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

DeleteFromTableRequest* DeleteFromTableRequest::default_instance_ = NULL;

DeleteFromTableRequest* DeleteFromTableRequest::New() const {
  return new DeleteFromTableRequest;
}

void DeleteFromTableRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_requesting_node_name()) {
      if (requesting_node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requesting_node_name_->clear();
      }
    }
    if (has_requesting_node_addr()) {
      if (requesting_node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requesting_node_addr_->clear();
      }
    }
  }
  urls_to_delete_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFromTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.DeleteFromTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requesting_node_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requesting_node_name().data(), this->requesting_node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requesting_node_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requesting_node_addr;
        break;
      }

      // required string requesting_node_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_requesting_node_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_node_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requesting_node_addr().data(), this->requesting_node_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requesting_node_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls_to_delete;
        break;
      }

      // repeated .msg.ResourceLocator urls_to_delete = 3;
      case 3: {
        if (tag == 26) {
         parse_urls_to_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls_to_delete()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls_to_delete;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.DeleteFromTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.DeleteFromTableRequest)
  return false;
#undef DO_
}

void DeleteFromTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.DeleteFromTableRequest)
  // required string requesting_node_name = 1;
  if (has_requesting_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_name().data(), this->requesting_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requesting_node_name(), output);
  }

  // required string requesting_node_addr = 2;
  if (has_requesting_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_addr().data(), this->requesting_node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requesting_node_addr(), output);
  }

  // repeated .msg.ResourceLocator urls_to_delete = 3;
  for (int i = 0; i < this->urls_to_delete_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->urls_to_delete(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.DeleteFromTableRequest)
}

::google::protobuf::uint8* DeleteFromTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DeleteFromTableRequest)
  // required string requesting_node_name = 1;
  if (has_requesting_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_name().data(), this->requesting_node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requesting_node_name(), target);
  }

  // required string requesting_node_addr = 2;
  if (has_requesting_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requesting_node_addr().data(), this->requesting_node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requesting_node_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requesting_node_addr(), target);
  }

  // repeated .msg.ResourceLocator urls_to_delete = 3;
  for (int i = 0; i < this->urls_to_delete_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->urls_to_delete(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DeleteFromTableRequest)
  return target;
}

int DeleteFromTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requesting_node_name = 1;
    if (has_requesting_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesting_node_name());
    }

    // required string requesting_node_addr = 2;
    if (has_requesting_node_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesting_node_addr());
    }

  }
  // repeated .msg.ResourceLocator urls_to_delete = 3;
  total_size += 1 * this->urls_to_delete_size();
  for (int i = 0; i < this->urls_to_delete_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urls_to_delete(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFromTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFromTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFromTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFromTableRequest::MergeFrom(const DeleteFromTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  urls_to_delete_.MergeFrom(from.urls_to_delete_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesting_node_name()) {
      set_requesting_node_name(from.requesting_node_name());
    }
    if (from.has_requesting_node_addr()) {
      set_requesting_node_addr(from.requesting_node_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFromTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFromTableRequest::CopyFrom(const DeleteFromTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFromTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->urls_to_delete())) return false;
  return true;
}

void DeleteFromTableRequest::Swap(DeleteFromTableRequest* other) {
  if (other != this) {
    std::swap(requesting_node_name_, other->requesting_node_name_);
    std::swap(requesting_node_addr_, other->requesting_node_addr_);
    urls_to_delete_.Swap(&other->urls_to_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFromTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFromTableRequest_descriptor_;
  metadata.reflection = DeleteFromTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeleteFromTableResponse::DeleteFromTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.DeleteFromTableResponse)
}

void DeleteFromTableResponse::InitAsDefaultInstance() {
}

DeleteFromTableResponse::DeleteFromTableResponse(const DeleteFromTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.DeleteFromTableResponse)
}

void DeleteFromTableResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFromTableResponse::~DeleteFromTableResponse() {
  // @@protoc_insertion_point(destructor:msg.DeleteFromTableResponse)
  SharedDtor();
}

void DeleteFromTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFromTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFromTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFromTableResponse_descriptor_;
}

const DeleteFromTableResponse& DeleteFromTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

DeleteFromTableResponse* DeleteFromTableResponse::default_instance_ = NULL;

DeleteFromTableResponse* DeleteFromTableResponse::New() const {
  return new DeleteFromTableResponse;
}

void DeleteFromTableResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFromTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.DeleteFromTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg.DeleteFromTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.DeleteFromTableResponse)
  return false;
#undef DO_
}

void DeleteFromTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.DeleteFromTableResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.DeleteFromTableResponse)
}

::google::protobuf::uint8* DeleteFromTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DeleteFromTableResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DeleteFromTableResponse)
  return target;
}

int DeleteFromTableResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFromTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFromTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFromTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFromTableResponse::MergeFrom(const DeleteFromTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFromTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFromTableResponse::CopyFrom(const DeleteFromTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFromTableResponse::IsInitialized() const {

  return true;
}

void DeleteFromTableResponse::Swap(DeleteFromTableResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFromTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFromTableResponse_descriptor_;
  metadata.reflection = DeleteFromTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRequest::kVersionFieldNumber;
const int HeartbeatRequest::kChecksumFieldNumber;
#endif  // !_MSC_VER

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.HeartbeatRequest)
}

void HeartbeatRequest::InitAsDefaultInstance() {
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:msg.HeartbeatRequest)
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRequest_descriptor_;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

HeartbeatRequest* HeartbeatRequest::default_instance_ = NULL;

HeartbeatRequest* HeartbeatRequest::New() const {
  return new HeartbeatRequest;
}

void HeartbeatRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeartbeatRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, checksum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.HeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checksum;
        break;
      }

      // required uint32 checksum = 2;
      case 2: {
        if (tag == 16) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.HeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.HeartbeatRequest)
  return false;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.HeartbeatRequest)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required uint32 checksum = 2;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.HeartbeatRequest)
}

::google::protobuf::uint8* HeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HeartbeatRequest)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required uint32 checksum = 2;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HeartbeatRequest)
  return target;
}

int HeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 checksum = 2;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRequest_descriptor_;
  metadata.reflection = HeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatResponse::kVersionFieldNumber;
const int HeartbeatResponse::kChecksumFieldNumber;
const int HeartbeatResponse::kResourceTableFieldNumber;
#endif  // !_MSC_VER

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.HeartbeatResponse)
}

void HeartbeatResponse::InitAsDefaultInstance() {
  resource_table_ = const_cast< ::msg::ResourceTable*>(&::msg::ResourceTable::default_instance());
}

HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  checksum_ = 0u;
  resource_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:msg.HeartbeatResponse)
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
    delete resource_table_;
  }
}

void HeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatResponse_descriptor_;
}

const HeartbeatResponse& HeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

HeartbeatResponse* HeartbeatResponse::default_instance_ = NULL;

HeartbeatResponse* HeartbeatResponse::New() const {
  return new HeartbeatResponse;
}

void HeartbeatResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeartbeatResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(version_, checksum_);
    if (has_resource_table()) {
      if (resource_table_ != NULL) resource_table_->::msg::ResourceTable::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.HeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checksum;
        break;
      }

      // required uint32 checksum = 2;
      case 2: {
        if (tag == 16) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource_table;
        break;
      }

      // optional .msg.ResourceTable resource_table = 3;
      case 3: {
        if (tag == 26) {
         parse_resource_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.HeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.HeartbeatResponse)
  return false;
#undef DO_
}

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.HeartbeatResponse)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required uint32 checksum = 2;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->checksum(), output);
  }

  // optional .msg.ResourceTable resource_table = 3;
  if (has_resource_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resource_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.HeartbeatResponse)
}

::google::protobuf::uint8* HeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HeartbeatResponse)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required uint32 checksum = 2;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->checksum(), target);
  }

  // optional .msg.ResourceTable resource_table = 3;
  if (has_resource_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resource_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HeartbeatResponse)
  return target;
}

int HeartbeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 checksum = 2;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

    // optional .msg.ResourceTable resource_table = 3;
    if (has_resource_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_resource_table()) {
      mutable_resource_table()->::msg::ResourceTable::MergeFrom(from.resource_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_resource_table()) {
    if (!this->resource_table().IsInitialized()) return false;
  }
  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(checksum_, other->checksum_);
    std::swap(resource_table_, other->resource_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatResponse_descriptor_;
  metadata.reflection = HeartbeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bool::kValFieldNumber;
#endif  // !_MSC_VER

Bool::Bool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Bool)
}

void Bool::InitAsDefaultInstance() {
}

Bool::Bool(const Bool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Bool)
}

void Bool::SharedCtor() {
  _cached_size_ = 0;
  val_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bool::~Bool() {
  // @@protoc_insertion_point(destructor:msg.Bool)
  SharedDtor();
}

void Bool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bool_descriptor_;
}

const Bool& Bool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

Bool* Bool::default_instance_ = NULL;

Bool* Bool::New() const {
  return new Bool;
}

void Bool::Clear() {
  val_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Bool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Bool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Bool)
  return false;
#undef DO_
}

void Bool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Bool)
  // required bool val = 1;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Bool)
}

::google::protobuf::uint8* Bool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Bool)
  // required bool val = 1;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Bool)
  return target;
}

int Bool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool val = 1;
    if (has_val()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bool::MergeFrom(const Bool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bool::CopyFrom(const Bool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Bool::Swap(Bool* other) {
  if (other != this) {
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bool_descriptor_;
  metadata.reflection = Bool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int String::kValueFieldNumber;
#endif  // !_MSC_VER

String::String()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.String)
}

void String::InitAsDefaultInstance() {
}

String::String(const String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.String)
}

void String::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

String::~String() {
  // @@protoc_insertion_point(destructor:msg.String)
  SharedDtor();
}

void String::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return String_descriptor_;
}

const String& String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

String* String::default_instance_ = NULL;

String* String::New() const {
  return new String;
}

void String::Clear() {
  if (has_value()) {
    if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      value_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.String)
  return false;
#undef DO_
}

void String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.String)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.String)
}

::google::protobuf::uint8* String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.String)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.String)
  return target;
}

int String::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void String::MergeFrom(const String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void String::CopyFrom(const String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {

  return true;
}

void String::Swap(String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = String_descriptor_;
  metadata.reflection = String_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Int::kValueFieldNumber;
#endif  // !_MSC_VER

Int::Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Int)
}

void Int::InitAsDefaultInstance() {
}

Int::Int(const Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Int)
}

void Int::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Int::~Int() {
  // @@protoc_insertion_point(destructor:msg.Int)
  SharedDtor();
}

void Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int_descriptor_;
}

const Int& Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

Int* Int::default_instance_ = NULL;

Int* Int::New() const {
  return new Int;
}

void Int::Clear() {
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Int)
  return false;
#undef DO_
}

void Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Int)
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Int)
}

::google::protobuf::uint8* Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Int)
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Int)
  return target;
}

int Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Int::MergeFrom(const Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int::CopyFrom(const Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int::IsInitialized() const {

  return true;
}

void Int::Swap(Int* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int_descriptor_;
  metadata.reflection = Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Void::Void()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Void)
}

void Void::InitAsDefaultInstance() {
}

Void::Void(const Void& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Void)
}

void Void::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Void::~Void() {
  // @@protoc_insertion_point(destructor:msg.Void)
  SharedDtor();
}

void Void::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Void::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Void::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Void_descriptor_;
}

const Void& Void::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeMessages_2eproto();
  return *default_instance_;
}

Void* Void::default_instance_ = NULL;

Void* Void::New() const {
  return new Void;
}

void Void::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Void)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Void)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Void)
  return false;
#undef DO_
}

void Void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Void)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Void)
}

::google::protobuf::uint8* Void::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Void)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Void)
  return target;
}

int Void::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Void::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Void* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Void*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Void::MergeFrom(const Void& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Void::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Void::CopyFrom(const Void& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Void::IsInitialized() const {

  return true;
}

void Void::Swap(Void* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Void::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Void_descriptor_;
  metadata.reflection = Void_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)
